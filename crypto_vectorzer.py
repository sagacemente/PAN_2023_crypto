# -*- coding: utf-8 -*-
"""Crypto_Vectorzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jryKxXLChbD2WUDPBTuS-ODSUKBqulBM
"""

import tensorflow as tf

import numpy as np

from tensorflow.keras import layers
from tensorflow.keras import losses
from tensorflow.keras import preprocessing
from keras.models import Model
from tensorflow.keras.layers.experimental.preprocessing import TextVectorization

class Vectorizer:

  # Preprocessing function to remove some noise due to the translation.
  @staticmethod
  def clean_samples(input_data):
    tag_url = tf.strings.regex_replace(input_data,'http\S+', 'url')
    output_data = tf.strings.regex_replace(tag_url,'</documents>', '')
    return output_data

  def __init__(self, train_set):
    # Set a large sequence length to find the longest sample in the training set.
    sequence_length = 200000
    vectorize_layer = TextVectorization(
        standardize=Vectorizer.clean_samples,
        output_mode='int',
        output_sequence_length=sequence_length)

    train_text = train_set.map(lambda x, y: x)
    vectorize_layer.adapt(train_text)
    #vectorize_layer.get_vocabulary()

    model = tf.keras.models.Sequential()
    model.add(tf.keras.Input(shape=(1,), dtype=tf.string))
    model.add(vectorize_layer)

    longest_sample_length=1

    for element in train_set:
      authorDocument=element[0]
      label=element[1]
      
      #print("Sample considered is: ", authorDocument[0].numpy())
      #print("Preprocessed: ", str(custom_standardization(authorDocument[0].numpy())))
      #print("And has label: ", label[0].numpy())

      out=model(authorDocument)
      # Convert token list to numpy array.
      token_list = out.numpy()[0]
      token_list = np.trim_zeros(token_list,'b')
      if longest_sample_length < len(token_list):
        longest_sample_length = len(token_list)

    print("Length of the longest sample is:", longest_sample_length)
    # After tokenization longest_sample_length covers all the document lenghts in our dataset.
    sequence_length = longest_sample_length

    vectorize_layer = TextVectorization(
        standardize=Vectorizer.clean_samples,
        output_mode='int',
        output_sequence_length=sequence_length)

    # Finally adapt the vectorize layer.
    train_text = train_set.map(lambda x, y: x)
    vectorize_layer.adapt(train_text)
    max_features=len(vectorize_layer.get_vocabulary()) + 1
    print("\nVocabulary size is:", max_features)
    self.vectorize_layer = vectorize_layer